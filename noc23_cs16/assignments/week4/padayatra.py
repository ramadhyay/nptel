# -*- coding: utf-8 -*-
"""
Created on Thu Feb 23 19:48:09 2023

@author: Dhananjay_E
"""
from queue import PriorityQueue
import copy
import time

input_graph=[]

# n=int(input())
# for i in range(0,n):
#     inputs=input()
#     input_arr=[eval(i) for i in inputs.split()]
#     input_graph.append(input_arr)


# n=4
# input_graph=[ [3,1,5],
#               [1,2,4],
#               [3,2,3],
#               [1,5,44] ]

n=10
input_graph = [
[6 ,1 ,13],
[6 ,3 ,17],
[5 ,3 ,18],
[8 ,5 ,11],
[8 ,7 ,19],
[6 ,8 ,85],
[8 ,4 ,92],
[7 ,2 ,15],
[4 ,2 ,13],
[4 ,1 ,10]
]

n=472
input_graph=[
[1,6,19029],
[1,7,13879],
[8,1,51338],
[1,10,85197],
[11,1,65535],
[1,14,33973],
[15,1,69539],
[22,1,99475],
[25,1,65096],
[26,1,44836],
[1,27,64565],
[1,28,40646],
[29,1,63424],
[1,31,36349],
[33,1,43064],
[34,1,54587],
[37,1,48075],
[40,1,81271],
[43,1,50348],
[1,44,88922],
[45,1,84654],
[1,47,82224],
[1,49,11889],
[50,1,98514],
[53,1,97464],
[1,55,15837],
[56,1,31298],
[1,57,82302],
[1,58,26398],
[1,61,45075],
[63,1,91779],
[64,1,5617],
[66,1,65317],
[68,1,77623],
[1,70,6286],
[1,73,28419],
[76,1,85943],
[77,1,5089],
[1,79,11984],
[81,1,57081],
[1,82,33423],
[83,1,75148],
[84,1,88808],
[85,1,26153],
[1,86,23891],
[1,89,9233],
[92,1,18153],
[96,1,71643],
[97,1,24799],
[98,1,45692],
[1,100,17028],
[102,1,94007],
[1,105,86861],
[107,1,29223],
[108,1,8613],
[111,1,84684],
[1,115,50863],
[1,117,5371],
[1,120,91746],
[1,123,64557],
[127,1,68693],
[1,128,64290],
[129,1,93791],
[1,131,62890],
[133,1,88096],
[134,1,29730],
[1,135,30862],
[1,137,24338],
[1,143,95468],
[1,144,64223],
[1,147,39629],
[149,1,58151],
[151,1,47742],
[1,153,45525],
[1,154,17504],
[155,1,86417],
[1,156,15501],
[1,157,12860],
[158,1,54054],
[1,159,70999],
[160,1,2701],
[1,161,30768],
[162,1,51350],
[1,163,53140],
[164,1,95941],
[166,1,4955],
[1,169,57862],
[1,171,28405],
[173,1,92275],
[174,1,45743],
[176,1,20138],
[1,181,91236],
[1,185,47862],
[1,186,36920],
[187,1,65576],
[188,1,21128],
[1,190,39426],
[192,1,56839],
[1,197,64340],
[1,198,27637],
[199,1,58174],
[1,201,62212],
[1,205,74460],
[1,206,56770],
[1,207,29353],
[208,1,10990],
[1,209,96053],
[1,211,74796],
[1,212,75012],
[218,1,16439],
[1,219,93626],
[220,1,30386],
[222,1,73782],
[1,225,48625],
[1,229,47848],
[1,230,39571],
[1,232,64913],
[237,1,26645],
[1,238,40628],
[241,1,17229],
[1,242,67213],
[243,1,19316],
[246,1,73510],
[1,248,93900],
[250,1,31978],
[251,1,19353],
[1,252,76285],
[4,2,1068],
[2,5,55412],
[6,2,18112],
[7,2,83212],
[2,10,75253],
[2,11,66662],
[12,2,56369],
[14,2,35726],
[15,2,52466],
[2,16,74251],
[2,17,63276],
[2,18,79106],
[19,2,75578],
[21,2,83658],
[2,22,70126],
[2,27,92963],
[2,28,41695],
[2,30,23455],
[31,2,337],
[32,2,25582],
[33,2,51266],
[35,2,18764],
[36,2,3920],
[2,38,58350],
[2,40,79981],
[41,2,18560],
[2,45,82816],
[49,2,67258],
[2,50,19689],
[2,51,72230],
[52,2,15623],
[54,2,35342],
[2,60,46417],
[2,63,34609],
[2,67,81101],
[2,70,3134],
[2,72,31434],
[73,2,25285],
[2,77,86504],
[2,78,69331],
[79,2,87408],
[2,80,84534],
[81,2,96547],
[84,2,93512],
[2,86,30798],
[90,2,22754],
[93,2,65617],
[95,2,50016],
[2,98,8009],
[2,99,62485],
[2,100,42405],
[2,104,14198],
[2,109,97960],
[2,114,88463],
[117,2,76206],
[118,2,95691],
[120,2,32230],
[123,2,6376],
[125,2,59505],
[2,126,78166],
[127,2,99488],
[130,2,52144],
[133,2,1866],
[2,134,25364],
[2,135,18843],
[2,140,48817],
[142,2,78345],
[2,143,16976],
[2,144,47743],
[2,148,9641],
[2,149,85850],
[151,2,39479],
[2,153,55863],
[2,154,64707],
[155,2,86556],
[156,2,86448],
[157,2,31323],
[162,2,23509],
[164,2,78701],
[165,2,49338],
[166,2,24457],
[2,169,39192],
[2,170,70598],
[2,171,35043],
[172,2,18814],
[2,174,34619],
[2,177,60090],
[2,178,42005],
[179,2,14865],
[181,2,54068],
[182,2,20478],
[187,2,47947],
[188,2,53698],
[2,189,22207],
[191,2,61551],
[193,2,82252],
[2,194,43221],
[2,195,2362],
[2,198,6074],
[199,2,41176],
[200,2,32653],
[2,201,60861],
[205,2,52333],
[2,209,5498],
[212,2,98855],
[214,2,43574],
[216,2,96861],
[2,218,97627],
[220,2,93054],
[2,221,28331],
[222,2,49261],
[224,2,53162],
[2,226,91457],
[229,2,52199],
[2,231,73130],
[232,2,7691],
[233,2,37030],
[235,2,33772],
[237,2,46060],
[2,239,8122],
[240,2,75767],
[2,241,80437],
[2,242,28377],
[2,243,66606],
[244,2,85282],
[2,247,82182],
[251,2,82090],
[252,2,15453],
[3,5,31826],
[9,3,21078],
[3,11,98533],
[13,3,46302],
[14,3,2201],
[15,3,63337],
[17,3,47260],
[19,3,28012],
[3,20,29332],
[3,21,12592],
[3,22,6489],
[25,3,45455],
[26,3,15618],
[29,3,99800],
[3,33,8985],
[3,39,83902],
[3,42,94287],
[3,44,61888],
[50,3,63768],
[3,51,56174],
[3,53,27280],
[54,3,9845],
[3,55,22292],
[57,3,57039],
[3,59,13868],
[3,60,84732],
[61,3,60525],
[3,65,3933],
[68,3,46863],
[71,3,68705],
[75,3,1272],
[76,3,60175],
[3,79,58783],
[80,3,42893],
[81,3,33119],
[3,85,86827],
[88,3,57280],
[92,3,22350],
[93,3,29177],
[3,94,79694],
[3,98,11403],
[101,3,17487],
[3,108,25354],
[109,3,61915],
[3,111,19279],
[113,3,71172],
[114,3,44913],
[3,115,10876],
[3,118,27691],
[3,120,37354],
[122,3,93209],
[123,3,86212],
[127,3,17610],
[129,3,70086],
[130,3,80312],
[131,3,78046],
[3,133,68389],
[134,3,73203],
[137,3,56644],
[138,3,49054],
[3,139,27133],
[3,142,78999],
[144,3,32124],
[147,3,25441],
[3,148,47577],
[3,151,3181],
[154,3,63122],
[155,3,48459],
[3,157,79811],
[3,158,52790],
[3,159,5877],
[160,3,10763],
[3,161,73615],
[163,3,70208],
[3,164,91028],
[3,175,88121],
[3,177,45179],
[178,3,59851],
[179,3,87974],
[181,3,5688],
[182,3,89404],
[3,186,8065],
[187,3,99605],
[3,189,38867],
[3,190,46428],
[3,193,7154],
[3,195,22091],
[3,197,280],
[198,3,16299],
[3,199,40563],
[3,200,682],
[3,202,37927],
[205,3,9360],
[3,207,81087],
[3,208,84349],
[211,3,9810],
[212,3,95699],
[3,215,79398],
[216,3,60561],
[3,218,84562],
[221,3,55897],
[225,3,48885],
[3,226,73526],
[3,232,70497],
[233,3,98181],
[3,237,54868],
[238,3,34983],
[3,239,50336],
[3,242,38725],
[3,245,10354],
[3,248,88530],
[252,3,96108],
[5,4,93267],
[7,4,81522],
[4,8,80417],
[12,4,2298],
[4,15,45667],
[4,16,79010],
[17,4,91807],
[19,4,4267],
[20,4,26955],
[26,4,23884],
[28,4,90016],
[29,4,28298],
[4,30,62860],
[31,4,13800],
[32,4,24923],
[34,4,54243],
[35,4,15066],
[4,38,5000],
[4,39,54396],
[4,40,91326],
[44,4,66803],
[45,4,19771],
[50,4,1451],
[53,4,56029],
[4,54,79775],
[55,4,19900],
[56,4,56133],
[4,60,54162],
[61,4,51292],
[63,4,98727],
[4,65,64236],
[4,66,36815],
[67,4,62231],
[68,4,87479],
[70,4,14977],
[71,4,7790],
[4,72,27011],
[74,4,58142],
[4,78,48186],
[80,4,20528],
[4,82,26090],
[4,85,83950],
[4,86,72707],
[87,4,4148],
[4,90,36262],
[92,4,24273],
[96,4,61670],
[4,97,26730],
[98,4,46409],
[4,102,43555],
[4,109,40715],
[4,113,46695],
[115,4,49016],
[4,117,94172],
[4,119,19335],
[122,4,51061],
[4,125,13366],
[127,4,26675],
[130,4,36367],
[131,4,35631],
[4,134,47820],
[140,4,63902],
[4,144,91096],
[146,4,51579],
[4,147,82704],
[148,4,42756],
[4,149,53673],
[151,4,282],
[4,155,54744],
[156,4,99181],
[157,4,28164],
[4,159,33507],
[4,160,32613],
[4,161,33842],
[162,4,72893],
[167,4,44849],
[168,4,51932],
[4,172,96107],
[173,4,62506],
[175,4,72250],
[177,4,84992],
[4,179,2695],
[180,4,12414],
[181,4,88626],
[183,4,22520],
[4,185,55796],
[4,188,50803],
[4,189,22040],
[4,190,75628],
[4,191,66483],
[4,195,49737],
[198,4,73640],
[4,199,94292],
[4,201,74139],
[202,4,9536],
[4,203,33488],
[209,4,49707],
[4,210,25705],
[4,212,43466],
[216,4,49538],
[217,4,92108],
[4,219,25149],
[4,220,3753],
[228,4,69288],
[4,229,37172]]

begin=time.time()
graph={}

priority_queue=PriorityQueue()

# Construct the graph
for i in range(0,n):
    if input_graph[i][0] not in graph:
        graph[input_graph[i][0]]=[]
    
    if input_graph[i][1] not in graph:
        graph[input_graph[i][1]]=[]

    graph[input_graph[i][0]].append( [input_graph[i][1],input_graph[i][2]])
    graph[input_graph[i][1]].append( [input_graph[i][0],input_graph[i][2]])

total_distance = 0
for i in range(0,n):
    total_distance += input_graph[i][2]

infinity = total_distance + 1



def reset():
    d={}
    for k,v in graph.items():
        d[k] = infinity
    return d
# Shortest path
mod_graph=copy.deepcopy(graph)
def remove_edge(G,u,v):
    for edge in G[u]:
        if edge[0]==v:
            G[u].remove(edge)
            break
    for edge in G[v]:
        if edge[0]==u:
            G[v].remove(edge)
            break

def add_edge(G,u,v,w):
    if u in G:
        G[u].append([u,v,w])
    else:
        G[u] = [u,v,w]
    
    if v in G:
        G[v].append([v,u,w])
    else:
        G[v] = [v,u,w]
    
# Dijkstra
def shortpath(G,start,end):
    d[start]=0
    priority_queue.put([d[start],start])
    while not priority_queue.empty():
        node=priority_queue.get()
        u=node[1]
        for neighbours in G[u]:
            v=neighbours[0]
            w=neighbours[1]
            # print("u,v,d[u],d[v], w",u,v,d[u],d[v],w)
            if d[v] > d[u]+w:
                d[v] = d[u]+w
                priority_queue.put([d[v],v])
    return d[end]            


sp_list=[]
for i in range(0,n):
    remove_edge(graph,input_graph[i][0],input_graph[i][1])
    d=reset()
    sp=shortpath(graph,input_graph[i][1],input_graph[i][0])
    add_edge(graph,input_graph[i][0],input_graph[i][1],input_graph[i][2])
    if sp:
        sp_list.append(sp+input_graph[i][2])
print(min(sp_list))
end=time.time()
print(f"Total runtime of the program is {end - begin}")
